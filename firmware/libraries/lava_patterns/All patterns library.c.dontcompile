void lava_patterns_step(void)
{
	//lava_patterns_load();
	switch(current_pattern)
	{
		case kLavaPatternLoop: {
			lava_patterns_index = 0;
			current_pattern = pattern_order[lava_patterns_index];
			break;
		}
		
		case kLavaPatternHalo : {
			
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 3;
			
				if (shift)
					pattern_indexer--;
				else
					pattern_indexer++;
				
				
				lumen_leds_set_solid_rgb(0,0,0);
				lumen_leds_set_level_hsv(pattern_indexer, 0, 1.0f, 1.0f);
				if (shift) {
					lumen_leds_set_level_hsv(pattern_indexer + 1, 0, 1.0f, 0.3f);
					if (pattern_indexer == 8) {
						lumen_leds_set_level_hsv(7, 0, 1.0f, 0.1f);
						lumen_leds_set_level_hsv(9, 0, 1.0f, 0.2f);
					}
					else {
						lumen_leds_set_level_hsv(pattern_indexer + 2, 0, 1.0f, 0.2f);
						lumen_leds_set_level_hsv(pattern_indexer + 3, 0, 1.0f, 0.1f);
					}
				}
				else {
					lumen_leds_set_level_hsv(pattern_indexer - 1, 0, 1.0f, 0.3f);
					if (pattern_indexer == 1) {
						lumen_leds_set_level_hsv(0, 0, 1.0f,0.2f);
						lumen_leds_set_level_hsv(2, 0, 1.0f, 0.1f);
					}
					else {
						lumen_leds_set_level_hsv(pattern_indexer - 2, 0, 1.0f, 0.2f);
						lumen_leds_set_level_hsv(pattern_indexer - 3, 0, 1.0f, 0.1f);
					}
				}
				
				if (pattern_indexer == (kSunBoardNumberOfLedsPerRay - 1) || pattern_indexer == 0)
					shift = !shift;
			}
			else
				nrf_delay_us(150);
			
			lava_patterns_delay_pattern--;
			
			break;
		}
		
		//Checks three low frequency bands and has a highfrequency hue changer.
		//(Current demo pattern)
		case kLavaPatternThreePeaks : {
			float value = ((float)lava_patterns_brightness_peak / 10);
			//Delay between changing the hue(150ms)
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 3;
				if (lava_patterns_freq_max_pos == k160Hz) {
					hue = 0;
				}
				else if (lava_patterns_freq_max_pos == k400Hz) {
					hue = 120;
				}
				else if (lava_patterns_freq_max_pos == k1000Hz){
					hue = 240;
				}
			}
			hue = hue + (float)lava_patterns_hue_adjustment;
			lumen_leds_set_solid_hsv(hue, 1.0f, value);
			lava_patterns_delay_pattern--;
			
			//Brightness peak decay
			lava_patterns_brightness_peak -= 2;
			if(lava_patterns_brightness_peak < 1) lava_patterns_brightness_peak = 1;
			break;
		}
		
		case kLavaPatternFlameOLD : {
			
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 3;
				pattern_index = freq[k63Hz] > 50 ? pattern_index + 1 : pattern_index - 1;
				if (pattern_index < -1)
					pattern_index = -1;
				if (pattern_index > 2)
					pattern_index = 2;
				lumen_leds_set_solid_hsv(2, 1.0f, 0);
				
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+ (freq[k160Hz] % 10), 1.0f, 0.35f);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+ (freq[k160Hz] % 10), 1.0f, 0.1f);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+ (freq[k160Hz] % 10), 1.0f, 0.1f);
				
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-3, 5+ (freq[k160Hz] % 10), 1.0f, 0.5f);	
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-3, 0+ (freq[k160Hz] % 10), 1.0f, 0.35f);	
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-3, 0+ (freq[k160Hz] % 10), 1.0f, 0.35f);
				
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-2, 10+ (freq[k400Hz] % 10), 1.0f, 0.5f);	
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-2, 0+ (freq[k400Hz] % 10), 1.0f, 0.5f);	
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-2, 0+ (freq[k400Hz] % 10), 1.0f, 0.5f);	
				
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-1, 5+ (freq[k1000Hz] % 15), 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-1, 5+ (freq[k1000Hz] % 15), 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-1, 25+ (freq[k1000Hz] % 15), 1.0f, 0.5f);
				
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index), 48+ (freq[k2500Hz] % 15), 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index), 20+ (freq[k2500Hz] % 15), 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index), 20+ (freq[k2500Hz] % 15), 1.0f, 0.5f);
					
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)+ 1, 235 + (freq[k6250Hz] % 10), 0.15f, 0.1f);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)+ 1, 35+ (freq[k6250Hz] % 15), 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)+ 1, 35+ (freq[k6250Hz] % 15), 1.0f, 0.5f);

				
				if (freq[k16000Hz] % 3 == 0)
				{
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-5, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k16000Hz] % 2 == 0)
				{
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-5, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else
				{
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-4, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-5, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				
				float tempval = ((float)lava_patterns_max[k400Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k400Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-6, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k400Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k400Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_index)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				
				tempval = ((float)lava_patterns_max[k1000Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k1000Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-6, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k1000Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k1000Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_index)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				
				tempval = ((float)lava_patterns_max[k160Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k160Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-6, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k160Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
				else if (freq[k160Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_index)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.15f);
				}
			}
			else
				nrf_delay_us(150);
			lava_patterns_delay_pattern--;
			break;
		}
		
		case kLavaPatternFlame : {
	
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 4;
				if (freq[k63Hz] > 200)
					pattern_indexer++;
				else if (freq[k63Hz] < 100)
					pattern_indexer--;
				else
					pattern_indexer = 0;
				if (pattern_indexer < -1)
					pattern_indexer = -1;
				if (pattern_indexer > 1)
					pattern_indexer = 1;
					
			}
			float brightness;
			if (pattern_indexer == 1)
			{
				brightness = 1.0f;
			}
			else
			{
				brightness = 0.5f;
			}
			if (lava_patterns_delay_pattern3 < 1)
					lumen_leds_set_solid_hsv(2, 1.0f, 0);	
			
			if (lava_patterns_delay_pattern2 < 1) {
				lava_patterns_delay_pattern2 = 2;

				lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+ (freq[k160Hz] % 10), 1.0f, brightness / 2.0f);
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+ (freq[k160Hz] % 10), 1.0f, brightness / 2.0f);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+ (freq[k160Hz] % 10), 1.0f, brightness / 5.0f);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+ (freq[k160Hz] % 10), 1.0f, brightness / 5.0f);
				if (freq[k16000Hz] % 3 == 0)
				{
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-5, 0+(freq[k16000Hz] % 10), 1.0f,brightness / 2.0f);
				}
				else if (freq[k16000Hz] % 2 == 0)
				{
					lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
					lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-5, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-5, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
				}
				else
				{
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-4, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-5, 0+(freq[k16000Hz] % 10), 1.0f, brightness / 2.0f);
				}
				
				lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-3, 5+ (freq[k160Hz] % 10), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-3, 5+ (freq[k160Hz] % 10), 1.0f, brightness);	
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-3, 0+ (freq[k160Hz] % 10), 1.0f, brightness * 0.7f);	
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-3, 0+ (freq[k160Hz] % 10), 1.0f, brightness * 0.7f);
				
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-2, 10+ (freq[k400Hz] % 10), 1.0f, brightness);	
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-2, 10+ (freq[k400Hz] % 10), 1.0f, brightness);	
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-2, 0+ (freq[k400Hz] % 10), 1.0f, brightness);	
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-2, 0+ (freq[k400Hz] % 10), 1.0f, brightness);	
				
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-1, 5+ (freq[k1000Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-1, 5+ (freq[k1000Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-1, 25+ (freq[k1000Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-1, 25+ (freq[k1000Hz] % 15), 1.0f, brightness);
				
				lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer), 48+ (freq[k2500Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer), 48+ (freq[k2500Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer), 20+ (freq[k2500Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer), 20+ (freq[k2500Hz] % 15), 1.0f, brightness);
					
				lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)+ 1, 235 + (freq[k6250Hz] % 10), 0.15f, brightness / 5.0f);	
				lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)+ 1, 235 + (freq[k6250Hz] % 10), 0.15f, brightness / 5.0f);
				lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)+ 1, 35+ (freq[k6250Hz] % 15), 1.0f, brightness);
				lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)+ 1, 35+ (freq[k6250Hz] % 15), 1.0f, brightness);
			}
				
				
			if (lava_patterns_delay_pattern3 < 1) {
				lava_patterns_delay_pattern3 = 4;
				
				float tempval = ((float)lava_patterns_max[k400Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k400Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k400Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k400Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(3,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-9, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				
				tempval = ((float)lava_patterns_max[k1000Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k1000Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k1000Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k1000Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(1,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-9, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				
				tempval = ((float)lava_patterns_max[k160Hz]) / ((float)lava_patterns_freq_max);
				if (freq[k160Hz] % 35 == 0 || tempval > 0.9){
					lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-7, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k160Hz] % 36 == 0 || tempval > 0.6){
					lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-8, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
				else if (freq[k160Hz] % 37 == 0 || tempval > 0.3){
					lumen_leds_set_pixel_hsv(0,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-9, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
					lumen_leds_set_pixel_hsv(2,(kSunBoardNumberOfLedsPerRay - pattern_indexer)-9, 0+(freq[k16000Hz] % 10), 1.0f, 0.1f);
				}
			}
			nrf_delay_us(150);
			lava_patterns_delay_pattern--;
			lava_patterns_delay_pattern2--;
			lava_patterns_delay_pattern3--;
			break;
		}
		
		
		case kLavaPatternSwirl : {
			if (lava_patterns_delay_pattern < 1) {
				hue = 240;
				lasthue = 0;

				lava_patterns_delay_pattern = 4;
				lumen_leds_set_pixel_hsv(ray_index,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1), hue, 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(ray_index,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 2), hue, 1.0f, 0.5f);	
				lumen_leds_set_pixel_hsv((ray_index + 2) % 4,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1), lasthue, 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv((ray_index + 2) % 4,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 2), lasthue, 1.0f, 0.5f);					
				pattern_indexer ++;
				if (pattern_indexer == kSunBoardNumberOfLedsPerRay){
					pattern_indexer = 0;
					lumen_leds_set_pixel_hsv(3,0, lasthue, 1.0f, 0.5f);	
				}

				lumen_leds_set_pixel_hsv(1,9, lasthue, 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(3,9, hue, 1.0f, 0.5f);
							
				
				ray_index++;
				if (ray_index > 3) ray_index = 0;
				if (hue > 359) hue -= 360;	
			}
			else
				nrf_delay_us(150);
			
			lava_patterns_delay_pattern--;
			
			break;
		}
		
		case kLavaPatternBlocks : {
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 4;
				lumen_leds_set_pixel_hsv(ray_index,pattern_indexer, hue, 1.0f, 0.5f);
				lumen_leds_set_pixel_hsv(ray_index,pattern_indexer + 1, hue, 1.0f, 0.5f);						
				pattern_indexer += 2;
				if (pattern_indexer == kSunBoardNumberOfLedsPerRay){
					hue = hue + 101;
					pattern_indexer = 0;
				}

				if (hue > 359) hue -= 360;
				ray_index++;
				if (ray_index > 3) ray_index = 0;
			}
			else
				nrf_delay_us(150);
			
			lava_patterns_delay_pattern--;
			
			break;
		}
		
		case kLavaPatternSolidChecker : {
			
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 4;
				if (shift){
					lumen_leds_set_pixel_hsv(0,pattern_indexer, hue, 1.0f, 0.5f);
					lumen_leds_set_pixel_hsv(2,pattern_indexer, hue, 1.0f, 0.5f);
				}
				else{
					lumen_leds_set_pixel_hsv(1,pattern_indexer, hue, 1.0f, 0.5f);
					lumen_leds_set_pixel_hsv(3,pattern_indexer, hue, 1.0f, 0.5f);
				}
				shift = !shift;
				
				pattern_indexer++;
				if (pattern_indexer == kSunBoardNumberOfLedsPerRay)
				{
					hue = hue + 17;
					shift = !shift;
					pattern_indexer = 0;
				}
				
				if (hue > 359) hue -= 360;
			}
			else
				nrf_delay_us(150);
			lava_patterns_delay_pattern--;
			
			break;
		}
		
		case kLavaPatternLines : {
			if (lava_patterns_delay_pattern < 1) {
				lava_patterns_delay_pattern = 4;
				float brightnessDown = 1.0;
				float brightnessUp = 1.0;
				if (pattern_indexer == kSunBoardNumberOfLedsPerRay)
					pattern_indexer = 0;
				
					lumen_leds_set_pixel_hsv(0,pattern_indexer, 240, 1.0f, brightnessDown);
					lumen_leds_set_pixel_hsv(2,pattern_indexer, 240, 1.0f, brightnessDown);
					lumen_leds_set_pixel_hsv(1,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1), 240, 1.0f, brightnessUp);
					lumen_leds_set_pixel_hsv(3,kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1), 240, 1.0f, brightnessUp);
					
					//Set the fade from LED 0 to the head LED
					brightnessUp = ((float)kSunBoardNumberOfLedsPerRay -((float)pattern_indexer + 1.0f)) / 10;
					brightnessDown = ((float)kSunBoardNumberOfLedsPerRay -((float)pattern_indexer + 1.0f)) / 10;
					for (int j=0; j < pattern_indexer; j++)
					{	//line going down
						brightnessDown += 0.1f;
						lumen_leds_set_pixel_hsv(0,j, 240, 1.0f, brightnessDown);
						lumen_leds_set_pixel_hsv(2,j, 240, 1.0f,brightnessDown);
						
					}
					for (int j=0; j < kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1); j++)
					{ //line going up
						lumen_leds_set_pixel_hsv(1,j, 240, 1.0f, brightnessUp);
						lumen_leds_set_pixel_hsv(3,j, 240, 1.0f, brightnessUp);
						brightnessUp -= 0.1f;
					}
					
					//Set the fade from LED 9 to the head led
					brightnessUp = ((float)kSunBoardNumberOfLedsPerRay -((float)pattern_indexer + 1.0f)) / 10;
					brightnessDown = ((float)kSunBoardNumberOfLedsPerRay -((float)pattern_indexer + 1.0f)) / 10;
					for (int j=kSunBoardNumberOfLedsPerRay - 1; j > pattern_indexer; j--)
					{ //line going down
						lumen_leds_set_pixel_hsv(0,j, 240, 1.0f,brightnessDown);
						lumen_leds_set_pixel_hsv(2,j, 240, 1.0f, brightnessDown);
						brightnessDown -= 0.1f;
					}
					for (int j=kSunBoardNumberOfLedsPerRay - 1; j > kSunBoardNumberOfLedsPerRay - (pattern_indexer + 1); j--)
					{ //line going up
						brightnessUp += 0.1f;
						lumen_leds_set_pixel_hsv(1,j, 240, 1.0f, brightnessUp);
						lumen_leds_set_pixel_hsv(3,j, 240, 1.0f, brightnessUp);
					}
					pattern_indexer++;
				}
			else
				nrf_delay_us(150);
			lava_patterns_delay_pattern--;
			break;
		}
		
		//Billy's Flow Pattern with 400Hz detection to start flow.
		case kLavaPatternFlow : {
			float value = ((float)lava_patterns_brightness_peak / 10);
			//lava_patterns_400Hz_max = 1;
			hue += 1 + (9.0f * (float)lava_patterns_max[k400Hz]) / (1.0f * (float)lava_patterns_freq_max);

			if (hue > 359) hue = hue - 360;
			for(int j=0; j<kSunBoardNumberOfLedsPerRay; j++ ) {
					lumen_leds_set_level_hsv(j, hue+(10*j), 1.0f, value);
			}

			//Brightness peak decay
			lava_patterns_brightness_peak -= 2;
			if(lava_patterns_brightness_peak < 1) lava_patterns_brightness_peak = 1;
			
			
			lava_patterns_max[k1000Hz] = 100;
			lava_patterns_max[k400Hz] = 1;
			break;
		}
		
		case kLavaPatternBPM : {
			lumen_leds_set_level_hsv(0, 0, 1.0f, 0);
			lumen_leds_set_level_hsv(1, 0, 1.0f, 0);
			lumen_leds_set_level_hsv(2, 0, 1.0f, 0);
			lumen_leds_set_level_hsv(3, 300, 1.0f, lava_patterns_PPI[k16000Hz] > 0 ? 1.0 : 0);
			lumen_leds_set_level_hsv(4, 240, 1.0f, lava_patterns_PPI[k6250Hz] > 0 ? 1.0 : 0);
			lumen_leds_set_level_hsv(5, 180, 1.0f, lava_patterns_PPI[k2500Hz] > 0 ? 1.0 : 0);
			lumen_leds_set_level_hsv(6, 120, 1.0f, lava_patterns_PPI[k1000Hz] > 0 ? 10 : 0);
			lumen_leds_set_level_hsv(7, 60, 1.0f, lava_patterns_PPI[k400Hz] > 0 ? 1.0 : 0);
			lumen_leds_set_level_hsv(8, 30, 1.0f, lava_patterns_PPI[k160Hz] > 0 ? 1.0 : 0);
			lumen_leds_set_level_hsv(9, 0, 1.0f, lava_patterns_PPI[k63Hz] > 0 ? 1.0 : 0);
			
			break;
		}

		//WIP of using a vector and the entire range of frequencies to make a light show.
		case kLavaPatternVector : {
			
			float value = ((float)lava_patterns_brightness_peak / 10);
			//Delay between changing the hue(150ms)
			if (lava_patterns_delay_pattern < 1)
			{
				lava_patterns_delay_pattern = 3;
				lasthue = hue;
				hue = define_colors[lava_patterns_freq_max_pos].hue; 
				//Goes through each frequency band and assigns the saturation to be scaled off of max freqency power
				//Then assigns the output hue to a combination of each frequency's base defined hue scaled by its saturation.
				//This again, all relative to the max frequency power and its defined hue.
				//See define_colors[] for more information.
				for (int i = 0; i < kNumFreqBands; i++)
				{
					if (i != lava_patterns_freq_max_pos)
					{
						float num = ((float)(lava_patterns_max[i]));
						float den = ((float)(lava_patterns_freq_max));
						define_colors[i].saturation = (num / den) / 2;
			//			adctobyte(num, lava_patterns_freq_max, define_colors[i].saturation);
						if (i == k160Hz && define_colors[lava_patterns_freq_max_pos].hue > 180)
						{
								hue = hue + ((360.0 - define_colors[lava_patterns_freq_max_pos].hue) * define_colors[i].saturation);
						}
						else if (define_colors[i].hue < define_colors[lava_patterns_freq_max_pos].hue)
						{
							hue = hue - ((define_colors[lava_patterns_freq_max_pos].hue - define_colors[i].hue) *  define_colors[i].saturation);
						}
						else
						{
							hue = hue + ((define_colors[i].hue - define_colors[lava_patterns_freq_max_pos].hue) *  define_colors[i].saturation);
						}
					}
				}
				if (hue > 359) hue = hue - 360;
				if (hue < 0) hue = hue + 360;
				hue = (0.85 * hue + 0.15 * lasthue);
			}

			//It only assigns a hue in the end because it uses the previous saturations 
			//only as a modifier to scale the hues. 
			//May eventually need to actually blend saturations and use the outcome.
			lumen_leds_set_solid_hsv(hue, 1.0f, value);
			lava_patterns_delay_pattern--;
			lava_patterns_freq_max = 1;
			lava_patterns_brightness_peak -= 2;
			if(lava_patterns_brightness_peak < 1) lava_patterns_brightness_peak = 1;
			break;
		}
		
		//Light is off
		case kLavaPatternOff : {
		//ADC(or something else) is interrupting the LEDs if they update too early.
		//So, we need roughly 100useconds of time before we update LEDs.
		//If light is not on, reset the LEDs to off before updating them.
		lumen_leds_set_solid_rgb(0,0,0);
			break;
		}

		//Could not write to flash memory
		case kLavaPatternBadFlash : {
			lumen_leds_set_solid_rgb(50, 50, 50);
			break;
		}
		
		//Could not interpret data read from flash memory.
		case kLavaPatternBadRead : {
			lumen_leds_set_solid_rgb(150, 0,0);
			break;
		}
		
		default : {
			lumen_leds_set_solid_rgb(255,255,255);
			m_pattern = kLavaPatternFlow;
		}
	}
	for (int i = 0; i < kNumFreqBands; i++)
	{
		lava_patterns_max[i] = 1;
		lava_patterns_PPI[i] = 0;
	}
}